
SDK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001280  08001280  00011280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001298  08001298  00011298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080012a0  080012a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080012a4  080012a4  000112a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080012a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000024  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000030  20000030  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008b82  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000158f  00000000  00000000  00028bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000003b0  00000000  00000000  0002a150  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000390  00000000  00000000  0002a500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001fb80  00000000  00000000  0002a890  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000053d9  00000000  00000000  0004a410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ba513  00000000  00000000  0004f7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00109cfc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000834  00000000  00000000  00109d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000010ee  00000000  00000000  0010a5ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001268 	.word	0x08001268

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001268 	.word	0x08001268

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2400      	movs	r4, #0
 80004ce:	9405      	str	r4, [sp, #20]
 80004d0:	9406      	str	r4, [sp, #24]
 80004d2:	9407      	str	r4, [sp, #28]
 80004d4:	9408      	str	r4, [sp, #32]
 80004d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	9400      	str	r4, [sp, #0]
 80004da:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <MX_GPIO_Init+0xc8>)
 80004dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004de:	f042 0204 	orr.w	r2, r2, #4
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
 80004e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e6:	f002 0204 	and.w	r2, r2, #4
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	9401      	str	r4, [sp, #4]
 80004f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80004fe:	9201      	str	r2, [sp, #4]
 8000500:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000502:	9402      	str	r4, [sp, #8]
 8000504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000506:	f042 0208 	orr.w	r2, r2, #8
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
 800050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050e:	f002 0208 	and.w	r2, r2, #8
 8000512:	9202      	str	r2, [sp, #8]
 8000514:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	9403      	str	r4, [sp, #12]
 8000518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
 8000520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000522:	f002 0201 	and.w	r2, r2, #1
 8000526:	9203      	str	r2, [sp, #12]
 8000528:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	9404      	str	r4, [sp, #16]
 800052c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052e:	f042 0202 	orr.w	r2, r2, #2
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	9304      	str	r3, [sp, #16]
 800053c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800053e:	4e15      	ldr	r6, [pc, #84]	; (8000594 <MX_GPIO_Init+0xcc>)
 8000540:	4622      	mov	r2, r4
 8000542:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000546:	4630      	mov	r0, r6
 8000548:	f000 fb17 	bl	8000b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800054c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000550:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000552:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000556:	a905      	add	r1, sp, #20
 8000558:	480f      	ldr	r0, [pc, #60]	; (8000598 <MX_GPIO_Init+0xd0>)
 800055a:	f000 fa23 	bl	80009a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800055e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000562:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056a:	2502      	movs	r5, #2
 800056c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800056e:	a905      	add	r1, sp, #20
 8000570:	4630      	mov	r0, r6
 8000572:	f000 fa17 	bl	80009a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000582:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	a905      	add	r1, sp, #20
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_GPIO_Init+0xd4>)
 8000588:	f000 fa0c 	bl	80009a4 <HAL_GPIO_Init>

}
 800058c:	b00a      	add	sp, #40	; 0x28
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	40023800 	.word	0x40023800
 8000594:	40020c00 	.word	0x40020c00
 8000598:	40020800 	.word	0x40020800
 800059c:	40020000 	.word	0x40020000

080005a0 <func1>:
	case 3:
			func4();
			break;
	}
}
func1(){
 80005a0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80005a2:	4c0a      	ldr	r4, [pc, #40]	; (80005cc <func1+0x2c>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4620      	mov	r0, r4
 80005ac:	f000 fae5 	bl	8000b7a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005b0:	2032      	movs	r0, #50	; 0x32
 80005b2:	f000 f987 	bl	80008c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	4620      	mov	r0, r4
 80005be:	f000 fadc 	bl	8000b7a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f000 f97e 	bl	80008c4 <HAL_Delay>

}
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	bf00      	nop
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <func2>:
func2(){
 80005d0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005d2:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <func2+0x2c>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	4620      	mov	r0, r4
 80005dc:	f000 facd 	bl	8000b7a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005e0:	2032      	movs	r0, #50	; 0x32
 80005e2:	f000 f96f 	bl	80008c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ec:	4620      	mov	r0, r4
 80005ee:	f000 fac4 	bl	8000b7a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005f2:	2032      	movs	r0, #50	; 0x32
 80005f4:	f000 f966 	bl	80008c4 <HAL_Delay>
}
 80005f8:	bd10      	pop	{r4, pc}
 80005fa:	bf00      	nop
 80005fc:	40020c00 	.word	0x40020c00

08000600 <func3>:
func3(){
 8000600:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000602:	4c0a      	ldr	r4, [pc, #40]	; (800062c <func3+0x2c>)
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060a:	4620      	mov	r0, r4
 800060c:	f000 fab5 	bl	8000b7a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000610:	2032      	movs	r0, #50	; 0x32
 8000612:	f000 f957 	bl	80008c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061c:	4620      	mov	r0, r4
 800061e:	f000 faac 	bl	8000b7a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000622:	2032      	movs	r0, #50	; 0x32
 8000624:	f000 f94e 	bl	80008c4 <HAL_Delay>
}
 8000628:	bd10      	pop	{r4, pc}
 800062a:	bf00      	nop
 800062c:	40020c00 	.word	0x40020c00

08000630 <func4>:
func4(){
 8000630:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <func4+0x40>)
 800063a:	f000 fa9e 	bl	8000b7a <HAL_GPIO_WritePin>
	for (int i = 0; i<1000; i++){
 800063e:	2400      	movs	r4, #0
 8000640:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000644:	da0a      	bge.n	800065c <func4+0x2c>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0){
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <func4+0x44>)
 800064c:	f000 fa8e 	bl	8000b6c <HAL_GPIO_ReadPin>
 8000650:	b120      	cbz	r0, 800065c <func4+0x2c>
		break;
			} else{
				HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f000 f936 	bl	80008c4 <HAL_Delay>
	for (int i = 0; i<1000; i++){
 8000658:	3401      	adds	r4, #1
 800065a:	e7f1      	b.n	8000640 <func4+0x10>
			}
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <func4+0x40>)
 8000664:	f000 fa89 	bl	8000b7a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000668:	2032      	movs	r0, #50	; 0x32
 800066a:	f000 f92b 	bl	80008c4 <HAL_Delay>
}
 800066e:	bd10      	pop	{r4, pc}
 8000670:	40020c00 	.word	0x40020c00
 8000674:	40020800 	.word	0x40020800

08000678 <decider>:
decider(int a){
 8000678:	b508      	push	{r3, lr}
	switch (a){
 800067a:	2803      	cmp	r0, #3
 800067c:	d805      	bhi.n	800068a <decider+0x12>
 800067e:	e8df f000 	tbb	[pc, r0]
 8000682:	0502      	.short	0x0502
 8000684:	0b08      	.short	0x0b08
		func1();
 8000686:	f7ff ff8b 	bl	80005a0 <func1>
}
 800068a:	bd08      	pop	{r3, pc}
			func2();
 800068c:	f7ff ffa0 	bl	80005d0 <func2>
			break;
 8000690:	e7fb      	b.n	800068a <decider+0x12>
			func3();
 8000692:	f7ff ffb5 	bl	8000600 <func3>
			break;
 8000696:	e7f8      	b.n	800068a <decider+0x12>
			func4();
 8000698:	f7ff ffca 	bl	8000630 <func4>
}
 800069c:	e7f5      	b.n	800068a <decider+0x12>
	...

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b530      	push	{r4, r5, lr}
 80006a2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a4:	2230      	movs	r2, #48	; 0x30
 80006a6:	2100      	movs	r1, #0
 80006a8:	a808      	add	r0, sp, #32
 80006aa:	f000 fdd5 	bl	8001258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	2400      	movs	r4, #0
 80006b0:	9403      	str	r4, [sp, #12]
 80006b2:	9404      	str	r4, [sp, #16]
 80006b4:	9405      	str	r4, [sp, #20]
 80006b6:	9406      	str	r4, [sp, #24]
 80006b8:	9407      	str	r4, [sp, #28]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	9401      	str	r4, [sp, #4]
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <SystemClock_Config+0x94>)
 80006be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	9402      	str	r4, [sp, #8]
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <SystemClock_Config+0x98>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e2:	9302      	str	r3, [sp, #8]
 80006e4:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	2502      	movs	r5, #2
 80006e8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ea:	2301      	movs	r3, #1
 80006ec:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2310      	movs	r3, #16
 80006f0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f6:	2308      	movs	r3, #8
 80006f8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80006fa:	2378      	movs	r3, #120	; 0x78
 80006fc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	a808      	add	r0, sp, #32
 8000706:	f000 fa3f 	bl	8000b88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000712:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000716:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071c:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800071e:	2103      	movs	r1, #3
 8000720:	a803      	add	r0, sp, #12
 8000722:	f000 fc9f 	bl	8001064 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000726:	4622      	mov	r2, r4
 8000728:	4621      	mov	r1, r4
 800072a:	4620      	mov	r0, r4
 800072c:	f000 fbf8 	bl	8000f20 <HAL_RCC_MCOConfig>
}
 8000730:	b015      	add	sp, #84	; 0x54
 8000732:	bd30      	pop	{r4, r5, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <main>:
{
 800073c:	b508      	push	{r3, lr}
  HAL_Init();
 800073e:	f000 f895 	bl	800086c <HAL_Init>
  SystemClock_Config();
 8000742:	f7ff ffad 	bl	80006a0 <SystemClock_Config>
  MX_GPIO_Init();
 8000746:	f7ff febf 	bl	80004c8 <MX_GPIO_Init>
  counter = 0;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <main+0x44>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	e00a      	b.n	8000768 <main+0x2c>
	decider(counter%4);
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <main+0x44>)
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	4243      	negs	r3, r0
 8000758:	f000 0003 	and.w	r0, r0, #3
 800075c:	f003 0303 	and.w	r3, r3, #3
 8000760:	bf58      	it	pl
 8000762:	4258      	negpl	r0, r3
 8000764:	f7ff ff88 	bl	8000678 <decider>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0){
 8000768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <main+0x48>)
 800076e:	f000 f9fd 	bl	8000b6c <HAL_GPIO_ReadPin>
 8000772:	2800      	cmp	r0, #0
 8000774:	d1ed      	bne.n	8000752 <main+0x16>
		counter++;
 8000776:	4a02      	ldr	r2, [pc, #8]	; (8000780 <main+0x44>)
 8000778:	6813      	ldr	r3, [r2, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e7e8      	b.n	8000752 <main+0x16>
 8000780:	20000028 	.word	0x20000028
 8000784:	40020800 	.word	0x40020800

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2100      	movs	r1, #0
 800078c:	9100      	str	r1, [sp, #0]
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_MspInit+0x34>)
 8000790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000796:	645a      	str	r2, [r3, #68]	; 0x44
 8000798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800079a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	9101      	str	r1, [sp, #4]
 80007a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007aa:	641a      	str	r2, [r3, #64]	; 0x40
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	b002      	add	sp, #8
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c0:	4770      	bx	lr

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler>

080007ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d2:	f000 f865 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d6:	bd08      	pop	{r3, pc}

080007d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	490f      	ldr	r1, [pc, #60]	; (8000818 <SystemInit+0x40>)
 80007da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80007de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <SystemInit+0x44>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	f042 0201 	orr.w	r2, r2, #1
 80007ee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007f0:	2000      	movs	r0, #0
 80007f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80007fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <SystemInit+0x48>)
 8000802:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800080a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800080c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800080e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000812:	608b      	str	r3, [r1, #8]
#endif
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00
 800081c:	40023800 	.word	0x40023800
 8000820:	24003010 	.word	0x24003010

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b510      	push	{r4, lr}
 8000826:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_InitTick+0x40>)
 800082a:	7818      	ldrb	r0, [r3, #0]
 800082c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000830:	fbb3 f3f0 	udiv	r3, r3, r0
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <HAL_InitTick+0x44>)
 8000836:	6810      	ldr	r0, [r2, #0]
 8000838:	fbb0 f0f3 	udiv	r0, r0, r3
 800083c:	f000 f89c 	bl	8000978 <HAL_SYSTICK_Config>
 8000840:	b968      	cbnz	r0, 800085e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	2c0f      	cmp	r4, #15
 8000844:	d901      	bls.n	800084a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	e00a      	b.n	8000860 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084a:	2200      	movs	r2, #0
 800084c:	4621      	mov	r1, r4
 800084e:	f04f 30ff 	mov.w	r0, #4294967295
 8000852:	f000 f85d 	bl	8000910 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000856:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_InitTick+0x40>)
 8000858:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800085a:	2000      	movs	r0, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800085e:	2001      	movs	r0, #1
}
 8000860:	bd10      	pop	{r4, pc}
 8000862:	bf00      	nop
 8000864:	20000004 	.word	0x20000004
 8000868:	20000000 	.word	0x20000000

0800086c <HAL_Init>:
{
 800086c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_Init+0x30>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000876:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800087e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000886:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f82f 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffc8 	bl	8000824 <HAL_InitTick>
  HAL_MspInit();
 8000894:	f7ff ff78 	bl	8000788 <HAL_MspInit>
}
 8000898:	2000      	movs	r0, #0
 800089a:	bd08      	pop	{r3, pc}
 800089c:	40023c00 	.word	0x40023c00

080008a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008a0:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <HAL_IncTick+0x10>)
 80008a2:	6811      	ldr	r1, [r2, #0]
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_IncTick+0x14>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	440b      	add	r3, r1
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	2000002c 	.word	0x2000002c
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008b8:	4b01      	ldr	r3, [pc, #4]	; (80008c0 <HAL_GetTick+0x8>)
 80008ba:	6818      	ldr	r0, [r3, #0]
}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000002c 	.word	0x2000002c

080008c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c4:	b538      	push	{r3, r4, r5, lr}
 80008c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff fff6 	bl	80008b8 <HAL_GetTick>
 80008cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008d2:	d002      	beq.n	80008da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <HAL_Delay+0x24>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008da:	f7ff ffed 	bl	80008b8 <HAL_GetTick>
 80008de:	1b40      	subs	r0, r0, r5
 80008e0:	42a0      	cmp	r0, r4
 80008e2:	d3fa      	bcc.n	80008da <HAL_Delay+0x16>
  {
  }
}
 80008e4:	bd38      	pop	{r3, r4, r5, pc}
 80008e6:	bf00      	nop
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008f8:	0200      	lsls	r0, r0, #8
 80008fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fe:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000900:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000904:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000908:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000910:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_NVIC_SetPriority+0x60>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091a:	f1c3 0407 	rsb	r4, r3, #7
 800091e:	2c04      	cmp	r4, #4
 8000920:	bf28      	it	cs
 8000922:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000924:	1d1d      	adds	r5, r3, #4
 8000926:	2d06      	cmp	r5, #6
 8000928:	d918      	bls.n	800095c <HAL_NVIC_SetPriority+0x4c>
 800092a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 35ff 	mov.w	r5, #4294967295
 8000930:	fa05 f404 	lsl.w	r4, r5, r4
 8000934:	ea21 0104 	bic.w	r1, r1, r4
 8000938:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093a:	fa05 f303 	lsl.w	r3, r5, r3
 800093e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000942:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000944:	2800      	cmp	r0, #0
 8000946:	db0b      	blt.n	8000960 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	0109      	lsls	r1, r1, #4
 800094a:	b2c9      	uxtb	r1, r1
 800094c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000950:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000954:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000958:	bc30      	pop	{r4, r5}
 800095a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095c:	2300      	movs	r3, #0
 800095e:	e7e5      	b.n	800092c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	f000 000f 	and.w	r0, r0, #15
 8000964:	0109      	lsls	r1, r1, #4
 8000966:	b2c9      	uxtb	r1, r1
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_NVIC_SetPriority+0x64>)
 800096a:	5419      	strb	r1, [r3, r0]
 800096c:	e7f4      	b.n	8000958 <HAL_NVIC_SetPriority+0x48>
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00
 8000974:	e000ed14 	.word	0xe000ed14

08000978 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	3801      	subs	r0, #1
 800097a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800097e:	d20a      	bcs.n	8000996 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_SYSTICK_Config+0x24>)
 8000982:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_SYSTICK_Config+0x28>)
 8000986:	21f0      	movs	r1, #240	; 0xf0
 8000988:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	2000      	movs	r0, #0
 800098e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000996:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	f200 80d7 	bhi.w	8000b5a <HAL_GPIO_Init+0x1b6>
{
 80009ac:	b4f0      	push	{r4, r5, r6, r7}
 80009ae:	b082      	sub	sp, #8
 80009b0:	e039      	b.n	8000a26 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009b2:	2207      	movs	r2, #7
 80009b4:	e000      	b.n	80009b8 <HAL_GPIO_Init+0x14>
 80009b6:	2200      	movs	r2, #0
 80009b8:	40b2      	lsls	r2, r6
 80009ba:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009bc:	3402      	adds	r4, #2
 80009be:	4e67      	ldr	r6, [pc, #412]	; (8000b5c <HAL_GPIO_Init+0x1b8>)
 80009c0:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009c4:	4a66      	ldr	r2, [pc, #408]	; (8000b60 <HAL_GPIO_Init+0x1bc>)
 80009c6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80009c8:	43ea      	mvns	r2, r5
 80009ca:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ce:	684f      	ldr	r7, [r1, #4]
 80009d0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80009d4:	d001      	beq.n	80009da <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80009d6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80009da:	4c61      	ldr	r4, [pc, #388]	; (8000b60 <HAL_GPIO_Init+0x1bc>)
 80009dc:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80009de:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80009e0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e4:	684f      	ldr	r7, [r1, #4]
 80009e6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80009ea:	d001      	beq.n	80009f0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80009ec:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80009f0:	4c5b      	ldr	r4, [pc, #364]	; (8000b60 <HAL_GPIO_Init+0x1bc>)
 80009f2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80009f6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009fa:	684f      	ldr	r7, [r1, #4]
 80009fc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000a00:	d001      	beq.n	8000a06 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000a02:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000a06:	4c56      	ldr	r4, [pc, #344]	; (8000b60 <HAL_GPIO_Init+0x1bc>)
 8000a08:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000a0a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000a0c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a0e:	684e      	ldr	r6, [r1, #4]
 8000a10:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000a14:	d001      	beq.n	8000a1a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000a16:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000a1a:	4c51      	ldr	r4, [pc, #324]	; (8000b60 <HAL_GPIO_Init+0x1bc>)
 8000a1c:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a1e:	3301      	adds	r3, #1
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	f200 8097 	bhi.w	8000b54 <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 8000a26:	2201      	movs	r2, #1
 8000a28:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2a:	680c      	ldr	r4, [r1, #0]
 8000a2c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000a30:	42aa      	cmp	r2, r5
 8000a32:	d1f4      	bne.n	8000a1e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a34:	684c      	ldr	r4, [r1, #4]
 8000a36:	2c02      	cmp	r4, #2
 8000a38:	d001      	beq.n	8000a3e <HAL_GPIO_Init+0x9a>
 8000a3a:	2c12      	cmp	r4, #18
 8000a3c:	d110      	bne.n	8000a60 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8000a3e:	08de      	lsrs	r6, r3, #3
 8000a40:	3608      	adds	r6, #8
 8000a42:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a46:	f003 0407 	and.w	r4, r3, #7
 8000a4a:	00a7      	lsls	r7, r4, #2
 8000a4c:	240f      	movs	r4, #15
 8000a4e:	40bc      	lsls	r4, r7
 8000a50:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a54:	690c      	ldr	r4, [r1, #16]
 8000a56:	40bc      	lsls	r4, r7
 8000a58:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a5c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000a60:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a62:	005f      	lsls	r7, r3, #1
 8000a64:	2603      	movs	r6, #3
 8000a66:	40be      	lsls	r6, r7
 8000a68:	43f6      	mvns	r6, r6
 8000a6a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a6e:	684c      	ldr	r4, [r1, #4]
 8000a70:	f004 0403 	and.w	r4, r4, #3
 8000a74:	40bc      	lsls	r4, r7
 8000a76:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000a7a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a7c:	684c      	ldr	r4, [r1, #4]
 8000a7e:	f104 3cff 	add.w	ip, r4, #4294967295
 8000a82:	f1bc 0f01 	cmp.w	ip, #1
 8000a86:	d903      	bls.n	8000a90 <HAL_GPIO_Init+0xec>
 8000a88:	2c11      	cmp	r4, #17
 8000a8a:	d001      	beq.n	8000a90 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8c:	2c12      	cmp	r4, #18
 8000a8e:	d110      	bne.n	8000ab2 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8000a90:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a92:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a96:	68cc      	ldr	r4, [r1, #12]
 8000a98:	40bc      	lsls	r4, r7
 8000a9a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000a9e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000aa0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aa6:	684c      	ldr	r4, [r1, #4]
 8000aa8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000aac:	409c      	lsls	r4, r3
 8000aae:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000ab0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ab2:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab4:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab6:	688a      	ldr	r2, [r1, #8]
 8000ab8:	40ba      	lsls	r2, r7
 8000aba:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000abc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000abe:	684a      	ldr	r2, [r1, #4]
 8000ac0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000ac4:	d0ab      	beq.n	8000a1e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	9201      	str	r2, [sp, #4]
 8000aca:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <HAL_GPIO_Init+0x1c0>)
 8000acc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000ace:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ad2:	6454      	str	r4, [r2, #68]	; 0x44
 8000ad4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ad6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ada:	9201      	str	r2, [sp, #4]
 8000adc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ade:	089c      	lsrs	r4, r3, #2
 8000ae0:	1ca6      	adds	r6, r4, #2
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_GPIO_Init+0x1b8>)
 8000ae4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ae8:	f003 0203 	and.w	r2, r3, #3
 8000aec:	0096      	lsls	r6, r2, #2
 8000aee:	220f      	movs	r2, #15
 8000af0:	40b2      	lsls	r2, r6
 8000af2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <HAL_GPIO_Init+0x1c4>)
 8000af8:	4290      	cmp	r0, r2
 8000afa:	f43f af5c 	beq.w	80009b6 <HAL_GPIO_Init+0x12>
 8000afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b02:	4290      	cmp	r0, r2
 8000b04:	d01a      	beq.n	8000b3c <HAL_GPIO_Init+0x198>
 8000b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	d018      	beq.n	8000b40 <HAL_GPIO_Init+0x19c>
 8000b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b12:	4290      	cmp	r0, r2
 8000b14:	d016      	beq.n	8000b44 <HAL_GPIO_Init+0x1a0>
 8000b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b1a:	4290      	cmp	r0, r2
 8000b1c:	d014      	beq.n	8000b48 <HAL_GPIO_Init+0x1a4>
 8000b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b22:	4290      	cmp	r0, r2
 8000b24:	d012      	beq.n	8000b4c <HAL_GPIO_Init+0x1a8>
 8000b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b2a:	4290      	cmp	r0, r2
 8000b2c:	d010      	beq.n	8000b50 <HAL_GPIO_Init+0x1ac>
 8000b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b32:	4290      	cmp	r0, r2
 8000b34:	f43f af3d 	beq.w	80009b2 <HAL_GPIO_Init+0xe>
 8000b38:	2208      	movs	r2, #8
 8000b3a:	e73d      	b.n	80009b8 <HAL_GPIO_Init+0x14>
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	e73b      	b.n	80009b8 <HAL_GPIO_Init+0x14>
 8000b40:	2202      	movs	r2, #2
 8000b42:	e739      	b.n	80009b8 <HAL_GPIO_Init+0x14>
 8000b44:	2203      	movs	r2, #3
 8000b46:	e737      	b.n	80009b8 <HAL_GPIO_Init+0x14>
 8000b48:	2204      	movs	r2, #4
 8000b4a:	e735      	b.n	80009b8 <HAL_GPIO_Init+0x14>
 8000b4c:	2205      	movs	r2, #5
 8000b4e:	e733      	b.n	80009b8 <HAL_GPIO_Init+0x14>
 8000b50:	2206      	movs	r2, #6
 8000b52:	e731      	b.n	80009b8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000b54:	b002      	add	sp, #8
 8000b56:	bcf0      	pop	{r4, r5, r6, r7}
 8000b58:	4770      	bx	lr
 8000b5a:	4770      	bx	lr
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	40013c00 	.word	0x40013c00
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b6c:	6903      	ldr	r3, [r0, #16]
 8000b6e:	4219      	tst	r1, r3
 8000b70:	d101      	bne.n	8000b76 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b72:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000b74:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000b76:	2001      	movs	r0, #1
 8000b78:	4770      	bx	lr

08000b7a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b7a:	b912      	cbnz	r2, 8000b82 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b7c:	0409      	lsls	r1, r1, #16
 8000b7e:	6181      	str	r1, [r0, #24]
  }
}
 8000b80:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000b82:	6181      	str	r1, [r0, #24]
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	f000 81bb 	beq.w	8000f04 <HAL_RCC_OscConfig+0x37c>
{
 8000b8e:	b570      	push	{r4, r5, r6, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b94:	6803      	ldr	r3, [r0, #0]
 8000b96:	f013 0f01 	tst.w	r3, #1
 8000b9a:	d03b      	beq.n	8000c14 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b9c:	4ba7      	ldr	r3, [pc, #668]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d02c      	beq.n	8000c02 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ba8:	4ba4      	ldr	r3, [pc, #656]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d021      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bba:	d04f      	beq.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bc0:	d052      	beq.n	8000c68 <HAL_RCC_OscConfig+0xe0>
 8000bc2:	4b9e      	ldr	r3, [pc, #632]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bd4:	6863      	ldr	r3, [r4, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d050      	beq.n	8000c7c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bda:	f7ff fe6d 	bl	80008b8 <HAL_GetTick>
 8000bde:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be0:	4b96      	ldr	r3, [pc, #600]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000be8:	d114      	bne.n	8000c14 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bea:	f7ff fe65 	bl	80008b8 <HAL_GetTick>
 8000bee:	1b40      	subs	r0, r0, r5
 8000bf0:	2864      	cmp	r0, #100	; 0x64
 8000bf2:	d9f5      	bls.n	8000be0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	e18a      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bf8:	4b90      	ldr	r3, [pc, #576]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000c00:	d0d8      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c02:	4b8e      	ldr	r3, [pc, #568]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c0a:	d003      	beq.n	8000c14 <HAL_RCC_OscConfig+0x8c>
 8000c0c:	6863      	ldr	r3, [r4, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 817a 	beq.w	8000f08 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	f013 0f02 	tst.w	r3, #2
 8000c1a:	d055      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c1c:	4b87      	ldr	r3, [pc, #540]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f013 0f0c 	tst.w	r3, #12
 8000c24:	d03e      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c26:	4b85      	ldr	r3, [pc, #532]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d033      	beq.n	8000c9a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c32:	68e3      	ldr	r3, [r4, #12]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d068      	beq.n	8000d0a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c38:	4b81      	ldr	r3, [pc, #516]	; (8000e40 <HAL_RCC_OscConfig+0x2b8>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c3e:	f7ff fe3b 	bl	80008b8 <HAL_GetTick>
 8000c42:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c44:	4b7d      	ldr	r3, [pc, #500]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f013 0f02 	tst.w	r3, #2
 8000c4c:	d154      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fe33 	bl	80008b8 <HAL_GetTick>
 8000c52:	1b40      	subs	r0, r0, r5
 8000c54:	2802      	cmp	r0, #2
 8000c56:	d9f5      	bls.n	8000c44 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000c58:	2003      	movs	r0, #3
 8000c5a:	e158      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c5c:	4a77      	ldr	r2, [pc, #476]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e7b5      	b.n	8000bd4 <HAL_RCC_OscConfig+0x4c>
 8000c68:	4b74      	ldr	r3, [pc, #464]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e7ab      	b.n	8000bd4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fe1c 	bl	80008b8 <HAL_GetTick>
 8000c80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	4b6e      	ldr	r3, [pc, #440]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c8a:	d0c3      	beq.n	8000c14 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c8c:	f7ff fe14 	bl	80008b8 <HAL_GetTick>
 8000c90:	1b40      	subs	r0, r0, r5
 8000c92:	2864      	cmp	r0, #100	; 0x64
 8000c94:	d9f5      	bls.n	8000c82 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000c96:	2003      	movs	r0, #3
 8000c98:	e139      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c9a:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ca2:	d1c6      	bne.n	8000c32 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca4:	4b65      	ldr	r3, [pc, #404]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f013 0f02 	tst.w	r3, #2
 8000cac:	d004      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x130>
 8000cae:	68e3      	ldr	r3, [r4, #12]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d001      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	e12a      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb8:	4a60      	ldr	r2, [pc, #384]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000cba:	6813      	ldr	r3, [r2, #0]
 8000cbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cc0:	6921      	ldr	r1, [r4, #16]
 8000cc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cc6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	f013 0f08 	tst.w	r3, #8
 8000cce:	d040      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cd0:	6963      	ldr	r3, [r4, #20]
 8000cd2:	b363      	cbz	r3, 8000d2e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	; (8000e44 <HAL_RCC_OscConfig+0x2bc>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cda:	f7ff fded 	bl	80008b8 <HAL_GetTick>
 8000cde:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce0:	4b56      	ldr	r3, [pc, #344]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce4:	f013 0f02 	tst.w	r3, #2
 8000ce8:	d133      	bne.n	8000d52 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cea:	f7ff fde5 	bl	80008b8 <HAL_GetTick>
 8000cee:	1b40      	subs	r0, r0, r5
 8000cf0:	2802      	cmp	r0, #2
 8000cf2:	d9f5      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	e10a      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf8:	4a50      	ldr	r2, [pc, #320]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000cfa:	6813      	ldr	r3, [r2, #0]
 8000cfc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d00:	6921      	ldr	r1, [r4, #16]
 8000d02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e7de      	b.n	8000cc8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <HAL_RCC_OscConfig+0x2b8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d10:	f7ff fdd2 	bl	80008b8 <HAL_GetTick>
 8000d14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d16:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f013 0f02 	tst.w	r3, #2
 8000d1e:	d0d3      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d20:	f7ff fdca 	bl	80008b8 <HAL_GetTick>
 8000d24:	1b40      	subs	r0, r0, r5
 8000d26:	2802      	cmp	r0, #2
 8000d28:	d9f5      	bls.n	8000d16 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	e0ef      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d2e:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <HAL_RCC_OscConfig+0x2bc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d34:	f7ff fdc0 	bl	80008b8 <HAL_GetTick>
 8000d38:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d3e:	f013 0f02 	tst.w	r3, #2
 8000d42:	d006      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d44:	f7ff fdb8 	bl	80008b8 <HAL_GetTick>
 8000d48:	1b40      	subs	r0, r0, r5
 8000d4a:	2802      	cmp	r0, #2
 8000d4c:	d9f5      	bls.n	8000d3a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e0dd      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	f013 0f04 	tst.w	r3, #4
 8000d58:	d079      	beq.n	8000e4e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d62:	d133      	bne.n	8000dcc <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d7c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_RCC_OscConfig+0x2c0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d86:	d023      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d88:	68a3      	ldr	r3, [r4, #8]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d034      	beq.n	8000df8 <HAL_RCC_OscConfig+0x270>
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d038      	beq.n	8000e04 <HAL_RCC_OscConfig+0x27c>
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000d94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	671a      	str	r2, [r3, #112]	; 0x70
 8000d9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d9e:	f022 0204 	bic.w	r2, r2, #4
 8000da2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000da4:	68a3      	ldr	r3, [r4, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d036      	beq.n	8000e18 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000daa:	f7ff fd85 	bl	80008b8 <HAL_GetTick>
 8000dae:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db4:	f013 0f02 	tst.w	r3, #2
 8000db8:	d148      	bne.n	8000e4c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dba:	f7ff fd7d 	bl	80008b8 <HAL_GetTick>
 8000dbe:	1b80      	subs	r0, r0, r6
 8000dc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dc4:	4298      	cmp	r0, r3
 8000dc6:	d9f3      	bls.n	8000db0 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8000dc8:	2003      	movs	r0, #3
 8000dca:	e0a0      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8000dcc:	2500      	movs	r5, #0
 8000dce:	e7d6      	b.n	8000d7e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dd0:	4a1d      	ldr	r2, [pc, #116]	; (8000e48 <HAL_RCC_OscConfig+0x2c0>)
 8000dd2:	6813      	ldr	r3, [r2, #0]
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000dda:	f7ff fd6d 	bl	80008b8 <HAL_GetTick>
 8000dde:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_RCC_OscConfig+0x2c0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000de8:	d1ce      	bne.n	8000d88 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dea:	f7ff fd65 	bl	80008b8 <HAL_GetTick>
 8000dee:	1b80      	subs	r0, r0, r6
 8000df0:	2802      	cmp	r0, #2
 8000df2:	d9f5      	bls.n	8000de0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8000df4:	2003      	movs	r0, #3
 8000df6:	e08a      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df8:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000dfa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6713      	str	r3, [r2, #112]	; 0x70
 8000e02:	e7cf      	b.n	8000da4 <HAL_RCC_OscConfig+0x21c>
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e08:	f042 0204 	orr.w	r2, r2, #4
 8000e0c:	671a      	str	r2, [r3, #112]	; 0x70
 8000e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e10:	f042 0201 	orr.w	r2, r2, #1
 8000e14:	671a      	str	r2, [r3, #112]	; 0x70
 8000e16:	e7c5      	b.n	8000da4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e18:	f7ff fd4e 	bl	80008b8 <HAL_GetTick>
 8000e1c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e22:	f013 0f02 	tst.w	r3, #2
 8000e26:	d011      	beq.n	8000e4c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e28:	f7ff fd46 	bl	80008b8 <HAL_GetTick>
 8000e2c:	1b80      	subs	r0, r0, r6
 8000e2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d9f3      	bls.n	8000e1e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8000e36:	2003      	movs	r0, #3
 8000e38:	e069      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	42470000 	.word	0x42470000
 8000e44:	42470e80 	.word	0x42470e80
 8000e48:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e4c:	b9e5      	cbnz	r5, 8000e88 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e4e:	69a3      	ldr	r3, [r4, #24]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d05b      	beq.n	8000f0c <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e54:	4a30      	ldr	r2, [pc, #192]	; (8000f18 <HAL_RCC_OscConfig+0x390>)
 8000e56:	6892      	ldr	r2, [r2, #8]
 8000e58:	f002 020c 	and.w	r2, r2, #12
 8000e5c:	2a08      	cmp	r2, #8
 8000e5e:	d058      	beq.n	8000f12 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d017      	beq.n	8000e94 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_RCC_OscConfig+0x394>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fd25 	bl	80008b8 <HAL_GetTick>
 8000e6e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <HAL_RCC_OscConfig+0x390>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e78:	d042      	beq.n	8000f00 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e7a:	f7ff fd1d 	bl	80008b8 <HAL_GetTick>
 8000e7e:	1b00      	subs	r0, r0, r4
 8000e80:	2802      	cmp	r0, #2
 8000e82:	d9f5      	bls.n	8000e70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000e84:	2003      	movs	r0, #3
 8000e86:	e042      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e88:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <HAL_RCC_OscConfig+0x390>)
 8000e8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	e7dc      	b.n	8000e4e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_RCC_OscConfig+0x394>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fd0d 	bl	80008b8 <HAL_GetTick>
 8000e9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_RCC_OscConfig+0x390>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ea8:	d006      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eaa:	f7ff fd05 	bl	80008b8 <HAL_GetTick>
 8000eae:	1b40      	subs	r0, r0, r5
 8000eb0:	2802      	cmp	r0, #2
 8000eb2:	d9f5      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	e02a      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eb8:	69e3      	ldr	r3, [r4, #28]
 8000eba:	6a22      	ldr	r2, [r4, #32]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ec0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ec4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ec6:	0852      	lsrs	r2, r2, #1
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ece:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ed0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ed4:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_RCC_OscConfig+0x390>)
 8000ed6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_RCC_OscConfig+0x394>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ede:	f7ff fceb 	bl	80008b8 <HAL_GetTick>
 8000ee2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_RCC_OscConfig+0x390>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000eec:	d106      	bne.n	8000efc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eee:	f7ff fce3 	bl	80008b8 <HAL_GetTick>
 8000ef2:	1b00      	subs	r0, r0, r4
 8000ef4:	2802      	cmp	r0, #2
 8000ef6:	d9f5      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000ef8:	2003      	movs	r0, #3
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000efc:	2000      	movs	r0, #0
 8000efe:	e006      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
 8000f00:	2000      	movs	r0, #0
 8000f02:	e004      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8000f04:	2001      	movs	r0, #1
}
 8000f06:	4770      	bx	lr
        return HAL_ERROR;
 8000f08:	2001      	movs	r0, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
}
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
 8000f14:	e7fb      	b.n	8000f0e <HAL_RCC_OscConfig+0x386>
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	42470060 	.word	0x42470060

08000f20 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	460c      	mov	r4, r1
 8000f26:	4616      	mov	r6, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000f28:	b308      	cbz	r0, 8000f6e <HAL_RCC_MCOConfig+0x4e>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	4d20      	ldr	r5, [pc, #128]	; (8000fb0 <HAL_RCC_MCOConfig+0x90>)
 8000f30:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f32:	f042 0204 	orr.w	r2, r2, #4
 8000f36:	632a      	str	r2, [r5, #48]	; 0x30
 8000f38:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f3a:	f002 0204 	and.w	r2, r2, #4
 8000f3e:	9202      	str	r2, [sp, #8]
 8000f40:	9a02      	ldr	r2, [sp, #8]

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2202      	movs	r2, #2
 8000f4a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000f54:	a903      	add	r1, sp, #12
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <HAL_RCC_MCOConfig+0x94>)
 8000f58:	f7ff fd24 	bl	80009a4 <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000f5c:	68ab      	ldr	r3, [r5, #8]
 8000f5e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000f62:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
 8000f66:	431c      	orrs	r4, r3
 8000f68:	60ac      	str	r4, [r5, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000f6a:	b008      	add	sp, #32
 8000f6c:	bd70      	pop	{r4, r5, r6, pc}
    __MCO1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	4d0f      	ldr	r5, [pc, #60]	; (8000fb0 <HAL_RCC_MCOConfig+0x90>)
 8000f74:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f76:	f042 0201 	orr.w	r2, r2, #1
 8000f7a:	632a      	str	r2, [r5, #48]	; 0x30
 8000f7c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f7e:	f002 0201 	and.w	r2, r2, #1
 8000f82:	9201      	str	r2, [sp, #4]
 8000f84:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2203      	movs	r2, #3
 8000f92:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f96:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000f98:	a903      	add	r1, sp, #12
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <HAL_RCC_MCOConfig+0x98>)
 8000f9c:	f7ff fd02 	bl	80009a4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000fa0:	68ab      	ldr	r3, [r5, #8]
 8000fa2:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000fa6:	4334      	orrs	r4, r6
 8000fa8:	431c      	orrs	r4, r3
 8000faa:	60ac      	str	r4, [r5, #8]
 8000fac:	e7dd      	b.n	8000f6a <HAL_RCC_MCOConfig+0x4a>
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d044      	beq.n	8001052 <HAL_RCC_GetSysClockFreq+0x96>
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d001      	beq.n	8000fd0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fcc:	4823      	ldr	r0, [pc, #140]	; (800105c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000fce:	4770      	bx	lr
{
 8000fd0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000fe2:	d013      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fec:	2300      	movs	r3, #0
 8000fee:	481c      	ldr	r0, [pc, #112]	; (8001060 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ff0:	fba1 0100 	umull	r0, r1, r1, r0
 8000ff4:	f7ff f8e8 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001000:	3301      	adds	r3, #1
 8001002:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001004:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001008:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_RCC_GetSysClockFreq+0x9c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001014:	461e      	mov	r6, r3
 8001016:	2700      	movs	r7, #0
 8001018:	015c      	lsls	r4, r3, #5
 800101a:	2500      	movs	r5, #0
 800101c:	1ae4      	subs	r4, r4, r3
 800101e:	eb65 0507 	sbc.w	r5, r5, r7
 8001022:	01a9      	lsls	r1, r5, #6
 8001024:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001028:	01a0      	lsls	r0, r4, #6
 800102a:	1b00      	subs	r0, r0, r4
 800102c:	eb61 0105 	sbc.w	r1, r1, r5
 8001030:	00cb      	lsls	r3, r1, #3
 8001032:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001036:	00c4      	lsls	r4, r0, #3
 8001038:	19a0      	adds	r0, r4, r6
 800103a:	eb43 0107 	adc.w	r1, r3, r7
 800103e:	028b      	lsls	r3, r1, #10
 8001040:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001044:	0284      	lsls	r4, r0, #10
 8001046:	4620      	mov	r0, r4
 8001048:	4619      	mov	r1, r3
 800104a:	2300      	movs	r3, #0
 800104c:	f7ff f8bc 	bl	80001c8 <__aeabi_uldivmod>
 8001050:	e7d2      	b.n	8000ff8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	00f42400 	.word	0x00f42400
 8001060:	017d7840 	.word	0x017d7840

08001064 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001064:	2800      	cmp	r0, #0
 8001066:	f000 809d 	beq.w	80011a4 <HAL_RCC_ClockConfig+0x140>
{
 800106a:	b570      	push	{r4, r5, r6, lr}
 800106c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800106e:	4b4f      	ldr	r3, [pc, #316]	; (80011ac <HAL_RCC_ClockConfig+0x148>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	428b      	cmp	r3, r1
 8001078:	d209      	bcs.n	800108e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	b2cb      	uxtb	r3, r1
 800107c:	4a4b      	ldr	r2, [pc, #300]	; (80011ac <HAL_RCC_ClockConfig+0x148>)
 800107e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001080:	6813      	ldr	r3, [r2, #0]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	428b      	cmp	r3, r1
 8001088:	d001      	beq.n	800108e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
}
 800108c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	f013 0f02 	tst.w	r3, #2
 8001094:	d017      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001096:	f013 0f04 	tst.w	r3, #4
 800109a:	d004      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800109c:	4a44      	ldr	r2, [pc, #272]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 800109e:	6893      	ldr	r3, [r2, #8]
 80010a0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010a4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	f013 0f08 	tst.w	r3, #8
 80010ac:	d004      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ae:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 80010b0:	6893      	ldr	r3, [r2, #8]
 80010b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010b6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b8:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 80010ba:	6893      	ldr	r3, [r2, #8]
 80010bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010c0:	68a0      	ldr	r0, [r4, #8]
 80010c2:	4303      	orrs	r3, r0
 80010c4:	6093      	str	r3, [r2, #8]
 80010c6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f013 0f01 	tst.w	r3, #1
 80010ce:	d032      	beq.n	8001136 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d0:	6863      	ldr	r3, [r4, #4]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d021      	beq.n	800111a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d6:	1e9a      	subs	r2, r3, #2
 80010d8:	2a01      	cmp	r2, #1
 80010da:	d925      	bls.n	8001128 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	4a34      	ldr	r2, [pc, #208]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	f012 0f02 	tst.w	r2, #2
 80010e4:	d060      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e6:	4932      	ldr	r1, [pc, #200]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 80010e8:	688a      	ldr	r2, [r1, #8]
 80010ea:	f022 0203 	bic.w	r2, r2, #3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80010f2:	f7ff fbe1 	bl	80008b8 <HAL_GetTick>
 80010f6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	6862      	ldr	r2, [r4, #4]
 8001102:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001106:	d016      	beq.n	8001136 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001108:	f7ff fbd6 	bl	80008b8 <HAL_GetTick>
 800110c:	1b80      	subs	r0, r0, r6
 800110e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001112:	4298      	cmp	r0, r3
 8001114:	d9f0      	bls.n	80010f8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001116:	2003      	movs	r0, #3
 8001118:	e7b8      	b.n	800108c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	4a25      	ldr	r2, [pc, #148]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001122:	d1e0      	bne.n	80010e6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001124:	2001      	movs	r0, #1
 8001126:	e7b1      	b.n	800108c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001130:	d1d9      	bne.n	80010e6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	e7aa      	b.n	800108c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_RCC_ClockConfig+0x148>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	42ab      	cmp	r3, r5
 8001140:	d909      	bls.n	8001156 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	b2ea      	uxtb	r2, r5
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_RCC_ClockConfig+0x148>)
 8001146:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	42ab      	cmp	r3, r5
 8001150:	d001      	beq.n	8001156 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001152:	2001      	movs	r0, #1
 8001154:	e79a      	b.n	800108c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	f013 0f04 	tst.w	r3, #4
 800115c:	d006      	beq.n	800116c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 8001160:	6893      	ldr	r3, [r2, #8]
 8001162:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001166:	68e1      	ldr	r1, [r4, #12]
 8001168:	430b      	orrs	r3, r1
 800116a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	f013 0f08 	tst.w	r3, #8
 8001172:	d007      	beq.n	8001184 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 8001176:	6893      	ldr	r3, [r2, #8]
 8001178:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800117c:	6921      	ldr	r1, [r4, #16]
 800117e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001182:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001184:	f7ff ff1a 	bl	8000fbc <HAL_RCC_GetSysClockFreq>
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001190:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_RCC_ClockConfig+0x150>)
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	40d8      	lsrs	r0, r3
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_RCC_ClockConfig+0x154>)
 8001198:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fb42 	bl	8000824 <HAL_InitTick>
  return HAL_OK;
 80011a0:	2000      	movs	r0, #0
 80011a2:	e773      	b.n	800108c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80011a4:	2001      	movs	r0, #1
}
 80011a6:	4770      	bx	lr
        return HAL_ERROR;
 80011a8:	2001      	movs	r0, #1
 80011aa:	e76f      	b.n	800108c <HAL_RCC_ClockConfig+0x28>
 80011ac:	40023c00 	.word	0x40023c00
 80011b0:	40023800 	.word	0x40023800
 80011b4:	08001280 	.word	0x08001280
 80011b8:	20000000 	.word	0x20000000

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011c2:	e003      	b.n	80011cc <LoopCopyDataInit>

080011c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011ca:	3104      	adds	r1, #4

080011cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011d4:	d3f6      	bcc.n	80011c4 <CopyDataInit>
  ldr  r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011d8:	e002      	b.n	80011e0 <LoopFillZerobss>

080011da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011dc:	f842 3b04 	str.w	r3, [r2], #4

080011e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011e4:	d3f9      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011e6:	f7ff faf7 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f000 f811 	bl	8001210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff faa5 	bl	800073c <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011f8:	080012a8 	.word	0x080012a8
  ldr  r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001200:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001204:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001208:	20000030 	.word	0x20000030

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <__libc_init_array>:
 8001210:	b570      	push	{r4, r5, r6, lr}
 8001212:	4e0d      	ldr	r6, [pc, #52]	; (8001248 <__libc_init_array+0x38>)
 8001214:	4c0d      	ldr	r4, [pc, #52]	; (800124c <__libc_init_array+0x3c>)
 8001216:	1ba4      	subs	r4, r4, r6
 8001218:	10a4      	asrs	r4, r4, #2
 800121a:	2500      	movs	r5, #0
 800121c:	42a5      	cmp	r5, r4
 800121e:	d109      	bne.n	8001234 <__libc_init_array+0x24>
 8001220:	4e0b      	ldr	r6, [pc, #44]	; (8001250 <__libc_init_array+0x40>)
 8001222:	4c0c      	ldr	r4, [pc, #48]	; (8001254 <__libc_init_array+0x44>)
 8001224:	f000 f820 	bl	8001268 <_init>
 8001228:	1ba4      	subs	r4, r4, r6
 800122a:	10a4      	asrs	r4, r4, #2
 800122c:	2500      	movs	r5, #0
 800122e:	42a5      	cmp	r5, r4
 8001230:	d105      	bne.n	800123e <__libc_init_array+0x2e>
 8001232:	bd70      	pop	{r4, r5, r6, pc}
 8001234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001238:	4798      	blx	r3
 800123a:	3501      	adds	r5, #1
 800123c:	e7ee      	b.n	800121c <__libc_init_array+0xc>
 800123e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001242:	4798      	blx	r3
 8001244:	3501      	adds	r5, #1
 8001246:	e7f2      	b.n	800122e <__libc_init_array+0x1e>
 8001248:	080012a0 	.word	0x080012a0
 800124c:	080012a0 	.word	0x080012a0
 8001250:	080012a0 	.word	0x080012a0
 8001254:	080012a4 	.word	0x080012a4

08001258 <memset>:
 8001258:	4402      	add	r2, r0
 800125a:	4603      	mov	r3, r0
 800125c:	4293      	cmp	r3, r2
 800125e:	d100      	bne.n	8001262 <memset+0xa>
 8001260:	4770      	bx	lr
 8001262:	f803 1b01 	strb.w	r1, [r3], #1
 8001266:	e7f9      	b.n	800125c <memset+0x4>

08001268 <_init>:
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126a:	bf00      	nop
 800126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800126e:	bc08      	pop	{r3}
 8001270:	469e      	mov	lr, r3
 8001272:	4770      	bx	lr

08001274 <_fini>:
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	bf00      	nop
 8001278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127a:	bc08      	pop	{r3}
 800127c:	469e      	mov	lr, r3
 800127e:	4770      	bx	lr
